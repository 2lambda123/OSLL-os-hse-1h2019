diff --git a/kern/pmap.c b/kern/pmap.c
index d90bd1e..5a2757b 100644
--- a/kern/pmap.c
+++ b/kern/pmap.c
@@ -99,7 +99,14 @@ boot_alloc(uint32_t n)
 	//
 	// LAB 2: Your code here.
 
-	return NULL;
+    result = nextfree;
+
+    if (n > 0) {
+        nextfree += ROUNDUP(n, PGSIZE);
+        KADDR(PADDR(nextfree));
+    }
+
+    return result;
 }
 
 // Set up a two-level page table:
@@ -121,7 +128,7 @@ mem_init(void)
 	i386_detect_memory();
 
 	// Remove this line when you're ready to test this function.
-	panic("mem_init: This function is not finished\n");
+	// panic("mem_init: This function is not finished\n");
 
 	//////////////////////////////////////////////////////////////////////
 	// create initial page directory.
@@ -144,6 +151,8 @@ mem_init(void)
 	// array.  'npages' is the number of physical pages in memory.
 	// Your code goes here:
 
+    pages = (struct PageInfo*) boot_alloc(npages * sizeof(struct PageInfo));
+    memset(pages, 0, sizeof(struct PageInfo) * npages);
 
 	//////////////////////////////////////////////////////////////////////
 	// Now that we've allocated the initial kernel data structures, we set
@@ -167,6 +176,7 @@ mem_init(void)
 	//      (ie. perm = PTE_U | PTE_P)
 	//    - pages itself -- kernel RW, user NONE
 	// Your code goes here:
+    boot_map_region(kern_pgdir, UPAGES, PTSIZE, PADDR(pages), PTE_U | PTE_P);
 
 	//////////////////////////////////////////////////////////////////////
 	// Use the physical memory that 'bootstack' refers to as the kernel
@@ -180,6 +190,8 @@ mem_init(void)
 	//     Permissions: kernel RW, user NONE
 	// Your code goes here:
 
+    boot_map_region(kern_pgdir, KSTACKTOP - KSTKSIZE, KSTKSIZE, PADDR(bootstack), PTE_W);
+
 	//////////////////////////////////////////////////////////////////////
 	// Map all of physical memory at KERNBASE.
 	// Ie.  the VA range [KERNBASE, 2^32) should map to
@@ -189,6 +201,8 @@ mem_init(void)
 	// Permissions: kernel RW, user NONE
 	// Your code goes here:
 
+    boot_map_region(kern_pgdir, KERNBASE, /*((size_t)(1u << 32))*/ - KERNBASE, 0, PTE_W);
+
 	// Check that the initial page directory has been set up correctly.
 	check_kern_pgdir();
 
@@ -247,11 +261,17 @@ page_init(void)
 	// NB: DO NOT actually touch the physical memory corresponding to
 	// free pages!
 	size_t i;
-	for (i = 0; i < npages; i++) {
-		pages[i].pp_ref = 0;
-		pages[i].pp_link = page_free_list;
-		page_free_list = &pages[i];
-	}
+    for (i = 0; i < npages; i++) {
+        void *cur = boot_alloc(0);
+        if (!i || (PGNUM(IOPHYSMEM) <= i && i < PGNUM(PADDR(cur)))) {
+            pages[i].pp_ref = 1;
+            pages[i].pp_link = NULL;
+        } else {
+            pages[i].pp_ref = 0;
+            pages[i].pp_link = page_free_list;
+            page_free_list = &pages[i];
+        }
+    }
 }
 
 //
@@ -263,11 +283,18 @@ page_init(void)
 // Returns NULL if out of free memory.
 //
 // Hint: use page2kva and memset
-struct PageInfo *
-page_alloc(int alloc_flags)
+struct PageInfo * page_alloc(int alloc_flags)
 {
-	// Fill this function in
-	return 0;
+    if (!page_free_list) {
+        return NULL;
+    }
+    struct PageInfo *res = page_free_list;
+    page_free_list = page_free_list->pp_link;
+    if (alloc_flags & ALLOC_ZERO) {
+        memset(page2kva(res), 0, PGSIZE);
+    }
+    res->pp_link = NULL;
+    return res;
 }
 
 //
@@ -277,9 +304,21 @@ page_alloc(int alloc_flags)
 void
 page_free(struct PageInfo *pp)
 {
-	// Fill this function in
+    if (!pp) return;
+    // Fill this function in
+    // Hint: You may want to panic if pp->pp_ref is nonzero or
+    // pp->pp_link is not NULL.
+    if (pp->pp_ref) {
+        panic("pp_ref is nonzero");
+    }
+    if (pp->pp_link != NULL) {
+        panic("pp_link is not NULL");
+    }
+    pp->pp_link = page_free_list;
+    page_free_list = pp;
 }
 
+
 //
 // Decrement the reference count on a page,
 // freeing it if there are no more refs.
@@ -313,11 +352,24 @@ page_decref(struct PageInfo* pp)
 // Hint 3: look at inc/mmu.h for useful macros that mainipulate page
 // table and page directory entries.
 //
-pte_t *
-pgdir_walk(pde_t *pgdir, const void *va, int create)
+pte_t * pgdir_walk(pde_t *pgdir, const void *va, int create)
 {
-	// Fill this function in
-	return NULL;
+    pde_t * dir = &pgdir[PDX(va)];
+    pte_t * table = NULL;
+    if (!(*dir & PTE_P)) { // not exists yet
+        if (!create) {
+            return NULL;
+        }
+        struct PageInfo *page = page_alloc(ALLOC_ZERO);
+        if (!page) return NULL;
+        page->pp_ref++;
+        table = page2kva(page);
+        *dir = page2pa(page) | PTE_P | PTE_U | PTE_W;
+    } else { // exists
+        table = KADDR(PTE_ADDR(*dir));
+    }
+    // return (table + PTX(va));
+    return &table[PTX(va)];
 }
 
 //
@@ -330,10 +382,18 @@ pgdir_walk(pde_t *pgdir, const void *va, int create)
 // mapped pages.
 //
 // Hint: the TA solution uses pgdir_walk
-static void
-boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)
+static void boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)
 {
-	// Fill this function in
+    for (size_t i = 0; i < size; i += PGSIZE) {
+        pte_t * pte = pgdir_walk(pgdir, (void*)(va + i), true);
+        if (!pte) {
+            panic("boot_map_region: walk returned NULL");
+        }
+        if (*pte & PTE_P) {
+            panic("boot_map_region: already exists");
+        }
+        *pte = (pa + i) | PTE_P | perm;
+    }
 }
 
 //
@@ -361,11 +421,18 @@ boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm
 // Hint: The TA solution is implemented using pgdir_walk, page_remove,
 // and page2pa.
 //
-int
-page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)
+int page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)
 {
-	// Fill this function in
-	return 0;
+    pte_t *pte = pgdir_walk(pgdir, va, 1);
+    if (!pte) {
+        return -E_NO_MEM;
+    }
+    pp->pp_ref++;
+    if (*pte & PTE_P) {
+        page_remove(pgdir, va);
+    }
+    *pte = page2pa(pp) | PTE_P | perm;
+    return 0;
 }
 
 //
@@ -379,11 +446,15 @@ page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)
 //
 // Hint: the TA solution uses pgdir_walk and pa2page.
 //
-struct PageInfo *
-page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
+struct PageInfo * page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
 {
-	// Fill this function in
-	return NULL;
+    pte_t * pte = pgdir_walk(pgdir, va, false);
+    if (pte == NULL) return NULL;
+    if (!(*pte & PTE_P)) return NULL;
+    if (pte_store) {
+        *pte_store = pte;
+    }
+    return pa2page(PTE_ADDR(*pte));
 }
 
 //
@@ -404,7 +475,12 @@ page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
 void
 page_remove(pde_t *pgdir, void *va)
 {
-	// Fill this function in
+    pte_t *pte;
+    struct PageInfo * page = page_lookup(pgdir, va, &pte);
+    if (page == NULL) return;
+    page_decref(page);
+    tlb_invalidate(pgdir, va);
+    *pte = 0;
 }
 
 //
